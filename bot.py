import asyncio
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

TOKEN = '7608926069:AAHqWOz0V9dSlqqAyKNA02Y162C6ZgL5hfc'
ADMIN_SERVER_URL = 'https://gurukfuadminbot-production.up.railway.app/new_request'
user_data_storage = {}
ADMIN_ID = 866765016

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data_storage[user_id] = {'started': True}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é

    keyboard = [[InlineKeyboardButton("üìë–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Ç 3500", callback_data='1'),
                InlineKeyboardButton(" üßë‚Äçüî¨–ù–∞—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Äî –æ—Ç 2000", callback_data='2')],
                [InlineKeyboardButton("üî¨–î/–ó ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ", callback_data='3'),
                InlineKeyboardButton("üìã–¶–û–† ‚Äî –æ—Ç 1000", callback_data='4')],
                [InlineKeyboardButton("üìä–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è ‚Äî –æ—Ç 100", callback_data='5'),
                InlineKeyboardButton("üïµÔ∏è–î—Ä—É–≥–æ–µüïµ", callback_data='other')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ö–∞–∫ –¥–µ–ª–∞ —Å —É—á–µ–±–æ–π? –í–µ—Ä–Ω–∏—Å—å –∫ –∑–∞–¥–∞–Ω–∏—è–º –∏ –ø–æ–ø—Ä–æ–±—É–π —Ä–µ—à–∏—Ç—å –∏—Ö —Å–∞–º!\n\n"
        "–ï—Å–ª–∏ —É —Å–∞–º–æ–≥–æ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Ç–æ —è —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!üëã\n\n"
        " ‚ú®–Ø –ø–æ–º–æ–≥—É –æ–±–ª–µ–≥—á–∏—Ç—å —Ç–≤–æ—é —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é –∂–∏–∑–Ω—å‚ú®\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é:\n"
        " ‚Ä¢ –∫—É—Ä—Å–æ–≤—ã—Ö üìë\n"
        " ‚Ä¢ –Ω–∞—É—á–Ω—ã—Ö —Ä–∞–±–æ—Ç üßë\n"
        " ‚Ä¢ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π üî¨\n"
        " ‚Ä¢ –∑–∞–¥–∞–Ω–∏–π –≤ –¶–û–†–µ üìã\n"
        " ‚Ä¢ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π üìä\n"
        " ‚Ä¢ –¥—Ä—É–≥–∏—Ö —Ä–∞–±–æ—Ç üïµÔ∏è\n\n"
        "–£–∫–∞–∑–∞–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
        "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –º–æ–∂–Ω–æ [—Ç—É—Ç](https://www.youtube.com/watch?v=dQw4w9WgXcQ).",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await asyncio.sleep(1.5)
    await update.message.reply_text(
        "–° —á–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup,
    )

async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in user_data_storage or (not user_data_storage[user_id].get('started')):
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.", show_alert=True)
        return

    await query.answer()
    if query.data == '1':
        user_data_storage[user_id]['type'] = '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            "–∏–Ω—Å—Ç–∏—Ç—É—Ç (–ö–§–£, –ò–£–≠–∏–§)\n"
            "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞ (–±—É—Ö —É—á—ë—Ç));\n"
            "–∫—É—Ä—Å (3 –∫—É—Ä—Å);\n"
            "–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞;\n"
            "—Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ;\n"
            "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã;\n"
            "–∫—Ä–∏—Ç–µ—Ä–∏–∏ (—à—Ä–∏—Ñ—Ç, —Ä–∞–∑–º–µ—Ä, –æ—Ç—Å—Ç—É–ø—ã, –æ–±—ä—ë–º —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç.–¥.) ‚Äî –ø—Ä–æ—Å—å–±–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é;\n"
            "–¥–∞—Ç—É —Å–¥–∞—á–∏ (15.02.2025)."
        )
    elif query.data == '2':
        user_data_storage[user_id]['type'] = '–ù–∞—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            "–∏–Ω—Å—Ç–∏—Ç—É—Ç (–ö–§–£, –ò–£–≠–∏–§)\n"
            "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞ (–±—É—Ö —É—á—ë—Ç));\n"
            "–∫—É—Ä—Å (3 –∫—É—Ä—Å);\n"
            "–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞;\n"
            "—Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –Ω–∞—É—á–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ;\n"
            "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã;\n"
            "–∫—Ä–∏—Ç–µ—Ä–∏–∏ (—à—Ä–∏—Ñ—Ç, —Ä–∞–∑–º–µ—Ä, –æ—Ç—Å—Ç—É–ø—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç.–¥.) ‚Äî –ø—Ä–æ—Å—å–±–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é;\n"
            "–¥–∞—Ç—É —Å–¥–∞—á–∏ (15.02.2025)."
        )
    elif query.data == '3':
        user_data_storage[user_id]['type'] = '–î/–ó'
        await query.edit_message_text(
            "–û–ø–∏—à–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, —Å–∫—Ä–∏–Ω—à–æ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ), –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –æ–±–æ–∑–Ω–∞—á—å—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏."
        )

    elif query.data == '4':
        user_data_storage[user_id]['type'] = '–¶–û–†'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            "–∏–Ω—Å—Ç–∏—Ç—É—Ç (–ö–§–£, –ò–£–≠–∏–§);\n"
            "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞ (–±—É—Ö —É—á—ë—Ç));\n"
            "–∫—É—Ä—Å (3 –∫—É—Ä—Å);\n"
            "–ø—Ä–µ–¥–º–µ—Ç (—Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏);\n"
            "–¥–∞—Ç—É —Å–¥–∞—á–∏ (15.02.2025)."
        )

    elif query.data == '5':
        user_data_storage[user_id]['type'] = '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
            "–∏–Ω—Å—Ç–∏—Ç—É—Ç (–ö–§–£, –ò–£–≠–∏–§);\n"
            "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—ç–∫–æ–Ω–æ–º–∏–∫–∞ (–±—É—Ö —É—á—ë—Ç));\n"
            "–∫—É—Ä—Å (3 –∫—É—Ä—Å);\n"
            "–ø—Ä–µ–¥–º–µ—Ç (—Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏);\n"
            "–û–ø–∏—à–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ);\n"
            "–¥–∞—Ç—É —Å–¥–∞—á–∏ (15.02.2025)."
        )

    elif query.data == 'other':
        user_data_storage[user_id]['type'] = '–î—Ä—É–≥–æ–µ'
        await query.edit_message_text(
            "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å —á–µ–º –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:"
        )


async def save_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_text = update.message.caption if update.message.caption else update.message.text  # –ò—Å–ø–æ–ª—å–∑—É–µ–º caption –¥–ª—è —Ñ–æ—Ç–æ
    has_photo = bool(update.message.photo)
    photo_url = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é –∏ –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    if user_id not in user_data_storage or not user_data_storage[user_id].get('started'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
        return

    if 'type' in user_data_storage[user_id]:
        request_type = user_data_storage[user_id]['type']

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        is_valid = False
        if request_type == '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞':
            is_valid = len(user_text.splitlines()) == 8
        elif request_type == '–ù–∞—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞':
            is_valid = len(user_text.splitlines()) == 8
        elif request_type == '–î/–ó':  # –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            is_valid = bool(user_text)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        elif request_type == '–¶–û–†':
            is_valid = len(user_text.splitlines()) == 5
        elif request_type == '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è':
            is_valid = len(user_text.splitlines()) >= 5
        elif request_type == '–î—Ä—É–≥–æ–µ':
            is_valid = bool(user_text)

        if is_valid:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ URL
            if has_photo:
                file = await context.bot.get_file(update.message.photo[-1].file_id)
                photo_url = file.file_path

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –≤–∫–ª—é—á–∞—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            requests.post(ADMIN_SERVER_URL, json={
                'user_id': user_id,
                'request_type': request_type,
                'details': user_text,
                'photo_url': photo_url  # –ü–µ—Ä–µ–¥–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            })
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ, –º—ã –ø—Ä–∏–Ω—è–ª–∏ –í–∞—à –∑–∞–ø—Ä–æ—Å! –ü–æ –≤—Å–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, –æ–∂–∏–¥–∞–π—Ç–µ.")
            del user_data_storage[user_id]
        else:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ.")


if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_query))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_user_input))
    app.add_handler(MessageHandler(filters.PHOTO, save_user_input))
    app.run_polling()
